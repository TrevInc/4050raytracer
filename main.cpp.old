#include <cassert>
#include <iostream>
#include "List.h"
#include "RayTracer.h"
#include "SpotLight.h"
#include "PointLight.h"
#include "ParallelLight.h"

#include <GL/gl.h>
#include <GL/glu.h>
#ifdef __APPLE__
#  include <GLUT/glut.h>
#else
#  include <GL/glut.h>
#endif

RayTracer rayTracer;
float  watcherLocation[3];
float watcherDirection[3];
float        watcherUp[3];

inline double randf(double min, double max) {
    double f = static_cast<double>(rand()) / RAND_MAX;
    return min + f * (max - min);
}

void display () {

//    glEnable(GL_DEPTH_TEST);
//    glDepthFunc(GL_LESS);
    glClearColor(0,0,0,0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glShadeModel(GL_SMOOTH); // gouraud shading

    //triangle test -- passed

        Node* shapeHead = rayTracer.getScene()->shapes.head;
        Node* shapePtr  = shapeHead; 
        int polyCount = 0;

        while (shapePtr){
            polyCount++;

            Triangle* currentTri = (Triangle *)shapePtr->data; 

                float currentNorm[3] = { (float)((Vector)(currentTri->orientation)).x,
                                         (float)((Vector)(currentTri->orientation)).y,
                                         (float)((Vector)(currentTri->orientation)).z };

                float currentVertex0[3]    = { (float)((Vector)(currentTri->p0)).x,
                                               (float)((Vector)(currentTri->p0)).y,
                                               (float)((Vector)(currentTri->p0)).z };

                float currentVertex1[3]    = { (float)((Vector)(currentTri->p1)).x,
                                               (float)((Vector)(currentTri->p1)).y,
                                               (float)((Vector)(currentTri->p1)).z };

                float currentVertex2[3]    = { (float)((Vector)(currentTri->p2)).x,
                                               (float)((Vector)(currentTri->p2)).y,
                                               (float)((Vector)(currentTri->p2)).z };

                std::cout << currentVertex0[0] << " " << currentVertex0[1] << " " << currentVertex0[2] << std::endl;
                std::cout << currentVertex1[0] << " " << currentVertex1[1] << " " << currentVertex1[2] << std::endl;
                std::cout << currentVertex2[0] << " " << currentVertex2[1] << " " << currentVertex2[2] << std::endl;

            glBegin(GL_TRIANGLES); //--

                glPushMatrix();

                glColor3f((float)(randf(0.0,1.0)),(float)(randf(0.0,1.0)),(float)(randf(0.0,1.0)));

                glNormal3fv(currentNorm);
                // insert texture array and glTexCoords2f() call here;
                glVertex3fv(currentVertex0);

                glNormal3fv(currentNorm);
                // insert texture array and glTexCoords2f() call here;
                glVertex3fv(currentVertex1);

                glNormal3fv(currentNorm);
                // insert texture array and glTexCoords2f() call here;
                glVertex3fv(currentVertex2); 

                glPopMatrix();

            glEnd();

            shapePtr = shapePtr->next;
        }

        std::cout << polyCount << " polygons rendered." << std::endl;

    /*gluLookAt(	
    0.0,   0.0,  0.5,           //Location of viewscreen
 	0.0,   0.0, -1.0,           //Direction to look
    0.0,   1.0,  0.0);          //Direction of up
    gluPerspective(65.0, 5/4, 0, 50);*/

    /* now pipe this beautiful image to the screen */
    glFlush();
    glutSwapBuffers();
}

void reshape(int w, int h) {

  // make the viewport the entire window
  glViewport(0, 0, w, h);
  
  // define the drawing coordinate system on the viewport
  // to be measured in pixels
  glMatrixMode(GL_PROJECTION); //Orthogonal if selected
  glLoadIdentity();
  //gluOrtho2D(0, w, 0, h);
  //gluPerspective(65.0, 5/4, 0, 50);
  glMatrixMode(GL_MODELVIEW);
  glutPostRedisplay();
}

void handleKey(unsigned char key, int x, int y){
  
  switch(key){

     //TODO: keybindings for arrows and A/Z to move in scene
     //Do by altering dimensions of eye point

     //TODO: keybindings for TGFH to aim up/down/left/right
     //Since WASD is taken. Use trig to rotate forward/up vectors

     //TODO: keybindings for O/P for Orthogonal/Perspective

     case 'r':
     case 'R':
      //trace image and display in window
      std::cout << "Rendering..." << std::endl;
      rayTracer.render();
      std::cout << "Rendering complete." << std::endl;
      //TODO: system call to display traced image
      break;
      
     case 'w':
     case 'W':
      //write raytraced image to disk
      //TODO: add prompt
      std::cout << "Saving..." << std::endl;
      rayTracer.saveImage("images/out.png");
      std::cout << "Saving complete." << std::endl;
      break;
      
    case 'q':		
    case 'Q':
    case 27:		
      exit(0);        
      
    default:		
      return;
  }
}

int main( int argc, char** argv) {
    rayTracer.cameraViewPoint(Vector(0, -40, 35));
    rayTracer.cameraViewDirection(Vector(0, 1, -0.7));
    rayTracer.screenPixelWidth(600);
    rayTracer.cameraFocalLength(0.5);
    rayTracer.cameraOrientation(Vector(0,0,1));
    rayTracer.loadShape("teapot-lite.obj");
    rayTracer.ambientLight(Color(0,0,0));
    rayTracer.enableReflections();

    //rayTracer.addLight(new SpotLight("SpotLight1", Color(1, 1, 1), Vector(0, 0, 100), Vector(0, 0, -1), 1, 20, 5));
    rayTracer.addLight(new PointLight("PointLight1", Vector(0,40, 40), Color(1, 1, 1), 1));
    rayTracer.addLight(new PointLight("PointLight1", Vector(40,0,0), Color(1, 1, 1), 0.8));
    //rayTracer.addLight(new ParallelLight("PointLight1", Color(1, 1, 1), Vector(0,0,0), Vector(0,1,0), 0.5));
    //rayTracer.addLight(new ParallelLight("PointLight1", Color(1, 1, 1), Vector(0,0,0), Vector(0,0,-1), 0.5));
    //rayTracer.addLight(new ParallelLight("PointLight1", Color(1, 1, 1), Vector(0,0,0), Vector(1,1,0), 0.4));

    //rayTracer.render();
    //rayTracer.saveImage("images/out.png");

    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowSize (600, 475); 
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Raytracer Final");

    //glEnable(GL_NORMALIZE);

    // TODO: count up the number of textures in the image -- iterator or counter?
    // TODO: Generate texture names for every texture

    // glGenTextures(	GLsizei n, GLuint * textures); //<< texture name unsigned ints stored in this array

    // TODO: assign textures to texture names

    /* for each polygon P in rayTracer.scene.shapes { */
    //TODO: can you write an iterator over List for this?

    Node* shapeHead = rayTracer.getScene()->shapes.head;
    Node* shapePtr  = shapeHead; 
    int polyCount = 0;

    while (shapePtr){
        polyCount++;
        Triangle* currentTri = (Triangle *)shapePtr->data; 

            float  ambientColors[3] = { (float)currentTri->material.color.red,
                                        (float)currentTri->material.color.green,
                                        (float)currentTri->material.color.blue};

            float  diffuseColors[3] = { (float)currentTri->material.diffusionCoefficient.red,
                                        (float)currentTri->material.diffusionCoefficient.green,
                                        (float)currentTri->material.diffusionCoefficient.blue};

            float specularColors[3] = { (float)currentTri->material.specularCoefficient.red,
                                        (float)currentTri->material.specularCoefficient.green,
                                        (float)currentTri->material.specularCoefficient.blue};



            glMaterialfv(GL_FRONT_AND_BACK,   GL_AMBIENT, ambientColors);
	        glMaterialfv(GL_FRONT_AND_BACK,   GL_DIFFUSE, diffuseColors);
	        glMaterialfv(GL_FRONT_AND_BACK,  GL_SPECULAR, specularColors);
	         glMaterialf(GL_FRONT_AND_BACK, GL_SHININESS, currentTri->material.specularExponent);

        /* TODO: bind a texture if applicable */

            //  if (P.textureMap == true) {
            //      glBindTexture (GL_TEXTURE_2D, P.material->ambientTexture.textureID); // TODO: get or store textureID of texture being bound
            //  }

        shapePtr = shapePtr->next;
    }

    /* enable lighting if it's called for */

    //if (rayTracer.scene.lights.getSize > 0) {
    //
    // TODO: write iterator for list of lights to define them here
    // TODO: glEnable(GL_LIGHT0) through whatever

    //   glEnable(GL_LIGHTING);
    //   glLightModeli (GL_LIGHT_MODEL_LOCAL_VIEWER, 1);

    /* traverse list of lights and declare glLightfv for each */
    /* instructions for type params at http://www.opengl.org/sdk/docs/man2/xhtml/glLight.xmlâ€Ž */
    //
    //  glLightfv(light_number, pname,  params);
    //
    //}
    /* for each light that is on -- assign location/directions from your list of lights */
    //if (rayTracer.scene.lights.getSize > 0) {
    // TODO: use same iterator for lights to move them around the scene

         //GLfloat lightpos[] = {.5, 1., 1., 0.}; //or whatever your light position is
         //glLightfv(GL_LIGHT0, GL_POSITION, lightpos);

        /*
        GLfloat light0_position[] = { 0, 0, 1, 0 };
        GLfloat light0_brightness = { 1, 1, 1, 1 };
        glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
        glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_brightness);
        glLightfv(GL_LIGHT0, GL_SPECULAR, light0_brightness);
        */

    //}    

    /* if I'm forgetting something add it here */

    glutDisplayFunc(display); 
    glutKeyboardFunc(handleKey);
    glutReshapeFunc(reshape);

    glClearColor(1, 1, 1, 1);
    glutMainLoop();
    return 0;
}
